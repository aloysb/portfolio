---
import Button from "./Button.astro";

interface Testimonial {
  quote: string;
  author: string;
}

const testimonials: Testimonial[] = [
  {
    quote: "Aloys did an excellent job and we'd gladly hire him again for future work.",
    author: "Anonymous Client"
  },
  {
    quote: "One additional job with Aloys. Once again he made a great job to update a website. As always, his communication and availability were great.",
    author: "Anonymous Client"
  },
  {
    quote: "Aloys is a true professional. Amazing communication skills, flexible and always helpful. This was an amazing experience for me and a talent I will be glad to work with again and again Thank you!",
    author: "Anonymous Client"
  },
  {
    quote: "I highly recommend Aloys",
    author: "Anonymous Client"
  },
  {
    quote: "Second job with him and I'll hire him again in the future",
    author: "Anonymous Client"
  },
  {
    quote: "Excellent job! Aloys delivered a very good work on this website development project. His availability and communication were great. His recommendations were spot on.",
    author: "Anonymous Client"
  },
  {
    quote: "Excellent advices and project follow up for the creation of an e-commerce website in a short deadline. His synthesis document to select best technical solutions was high quality. Aloys was very reactive.",
    author: "Anonymous Client"
  },
  {
    quote: "Will hire again",
    author: "Anonymous Client"
  }
];

// Function to shuffle array (Fisher-Yates algorithm)
function shuffleArray<T>(array: T[]): T[] {
  const newArray = [...array];
  for (let i = newArray.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
  }
  return newArray;
}

// Create 4 rows with shuffled testimonials
const row1 = shuffleArray(testimonials);
const row2 = shuffleArray(testimonials);
const row3 = shuffleArray(testimonials);
const row4 = shuffleArray(testimonials);

// Define different starting offsets for each row
const offsets = [
  "-100px", // Row 1 offset
  "-250px", // Row 2 offset
  "-50px",  // Row 3 offset
  "-180px"  // Row 4 offset
];

// Define different scroll speeds and directions for each row
const scrollSpeeds = [
  60,   // Row 1 speed (seconds to complete one cycle)
  -70,  // Row 2 speed (negative = opposite direction)
  50,   // Row 3 speed (faster)
  -80   // Row 4 speed (negative = opposite direction)
];

const rows = [row1, row2, row3, row4];
---

<section id="testimonials" class="py-20 bg-white">
  <div class="w-full">
    <div class="container mx-auto mb-12 px-4">
      <h2 class="text-4xl font-bold mb-2">Testimonials</h2>
      <p class="text-gray-600">Don't take my word for it!</p>
    </div>
    
    <div id="scrolling-testimonials" class="flex flex-col gap-4">
      {rows.map((row, rowIndex) => (
        <div class="w-full overflow-hidden">
          <div class="testimonial-row flex flex-nowrap gap-4 pb-4" 
               data-speed={scrollSpeeds[rowIndex]} 
               data-direction={scrollSpeeds[rowIndex] < 0 ? "left" : "right"}
               style={`margin-left: ${offsets[rowIndex]};`}>
            {/* Double the testimonials to create seamless loop */}
            {[...row, ...row].map((testimonial, index) => (
              <div class="border-2 border-black p-6 shadow-main rounded-lg flex-shrink-0 whitespace-nowrap">
                <p class="text-lg">"{testimonial.quote}"</p>
              </div>
            ))}
          </div>
        </div>
      ))}
    </div>
    
    <div id="static-testimonials" class="hidden container mx-auto px-4">
      <div class="grid md:grid-cols-2 gap-6">
        {testimonials.map((testimonial) => (
          <div class="border-2 border-black p-6 shadow-main rounded-lg">
            <p class="text-lg mb-2">"{testimonial.quote}"</p>
            <p class="text-sm text-right italic">â€” {testimonial.author}</p>
          </div>
        ))}
      </div>
    </div>
    
    <div class="flex justify-center mt-8">
      <Button id="toggle-view" variant="ghost" size="md" class="mt-8 "
       text="Thanks Alo, but this is impossible to read! Show me a list of your testimonials instead!" />
    </div>

  </div>
</section>

<style>
  @keyframes scrollRight {
    0% { transform: translateX(0); }
    100% { transform: translateX(-50%); }
  }
  
  @keyframes scrollLeft {
    0% { transform: translateX(-50%); }
    100% { transform: translateX(0); }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const testimonialRows = document.querySelectorAll('.testimonial-row');
    const scrollingTestimonials = document.getElementById('scrolling-testimonials');
    const staticTestimonials = document.getElementById('static-testimonials');
    const toggleButton = document.getElementById('toggle-view');
    let isScrollingView = true;
    
    // Initialize scrolling animations
    testimonialRows.forEach(row => {
      const speed = Math.abs(parseFloat(row.getAttribute('data-speed') || '20'));
      const direction = row.getAttribute('data-direction') || 'right';
      
      // Apply the appropriate animation
      const animation = direction === 'left' ? 'scrollLeft' : 'scrollRight';
      (row as HTMLElement).style.animation = `${animation} ${speed}s linear infinite`;
    });
    
    // Toggle between scrolling and static views
    toggleButton?.addEventListener('click', () => {
      if (isScrollingView) {
        // Switch to static view
        scrollingTestimonials?.classList.add('hidden');
        staticTestimonials?.classList.remove('hidden');
        if (toggleButton) toggleButton.textContent = "I prefer the scrolling banner! Take me back!";
      } else {
        // Switch to scrolling view
        scrollingTestimonials?.classList.remove('hidden');
        staticTestimonials?.classList.add('hidden');
        if (toggleButton) toggleButton.textContent = "Thanks Alo, but this is impossible to read! Show me a list of your testimonials instead!";
      }
      isScrollingView = !isScrollingView;
    });
  });
</script> 